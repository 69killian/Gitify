// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  email      String    @unique
  avatar_url String?
  github_id  String?   @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  // Relations
  streaks        Streak[]
  userBadges     UserBadge[]
  contributions  Contribution[]
  userChallenges UserChallenge[]
  feedbacks      Feedback[]
  integrations   Integration[]
}

model Streak {
  id            Int      @id @default(autoincrement())
  user_id       Int
  start_date    DateTime
  end_date      DateTime?
  current_streak Int     @default(1)
  longest_streak Int     @default(1)
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id])
}

model Badge {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  icon        String?
  category    String?
  condition   String
  created_at  DateTime @default(now())

  // Relations
  userBadges     UserBadge[]
  challengeRewards Challenge[] @relation("ChallengeReward")
}

model UserBadge {
  id         Int      @id @default(autoincrement())
  user_id    Int
  badge_id   Int
  unlocked_at DateTime @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id])
  badge Badge @relation(fields: [badge_id], references: [id])

  @@unique([user_id, badge_id])
}

model Contribution {
  id         Int      @id @default(autoincrement())
  user_id    Int
  type       String
  repository String?
  message    String?
  date       DateTime
  created_at DateTime @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id])
}

model Challenge {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  difficulty    String?
  duration      Int?
  reward_badge_id Int?
  created_at    DateTime @default(now())

  // Relations
  rewardBadge Badge? @relation("ChallengeReward", fields: [reward_badge_id], references: [id])
  userChallenges UserChallenge[]
}

model UserChallenge {
  id         Int      @id @default(autoincrement())
  user_id    Int
  challenge_id Int
  start_date DateTime @default(now())
  end_date   DateTime?
  progress   Int      @default(0)
  status     String   @default("in_progress")
  created_at DateTime @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id])
  challenge Challenge @relation(fields: [challenge_id], references: [id])
}

model Feedback {
  id          Int      @id @default(autoincrement())
  user_id     Int
  type        String
  title       String
  description String
  status      String   @default("pending")
  screenshots String[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id])
}

model Integration {
  id              Int      @id @default(autoincrement())
  user_id         Int
  service         String
  status          String   @default("disconnected")
  permissions     String[]
  access_token    String?
  refresh_token   String?
  token_expires_at DateTime?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id])

  @@unique([user_id, service])
}