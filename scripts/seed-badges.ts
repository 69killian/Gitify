/**
 * Script pour g√©n√©rer des badges de test et les attribuer √† l'utilisateur
 * 
 * Ex√©cution : npx ts-node -r tsconfig-paths/register scripts/seed-badges.ts
 */

import prisma from '../lib/prisma';

async function main() {
  // R√©cup√©rer un utilisateur existant
  const user = await prisma.user.findFirst();
  
  if (!user) {
    console.error('Aucun utilisateur n\'a √©t√© trouv√©. Cr√©ez d\'abord un compte via l\'authentification GitHub.');
    process.exit(1);
  }

  console.log(`G√©n√©ration de badges pour l'utilisateur: ${user.name || user.username} (${user.id})`);

  // D√©finir les badges √† cr√©er
  const badgesToCreate = [
    // Badges de Streak
    { 
      name: "Streak Newbie", 
      description: "Premier streak atteint", 
      icon: "üî•", 
      category: "üî• Streaks", 
      condition: "3 jours de streak" 
    },
    { 
      name: "Streak Enthusiast", 
      description: "Tu commences √† √™tre s√©rieux", 
      icon: "üî•üî•", 
      category: "üî• Streaks", 
      condition: "7 jours de streak" 
    },
    { 
      name: "Streak Warrior", 
      description: "La r√©gularit√© paie !", 
      icon: "‚öîÔ∏èüî•", 
      category: "üî• Streaks", 
      condition: "15 jours de streak" 
    },
    { 
      name: "Streak Master", 
      description: "Tu es un vrai grinder", 
      icon: "üèÖüî•", 
      category: "üî• Streaks", 
      condition: "30 jours de streak" 
    },
    { 
      name: "Streak God", 
      description: "Plus d√©termin√© que jamais", 
      icon: "üèÜüî•", 
      category: "üî• Streaks", 
      condition: "100 jours de streak" 
    },
    
    // Badges de Pull Request
    { 
      name: "PR Rookie", 
      description: "Premi√®re pull request soumise", 
      icon: "üîÑ", 
      category: "üìù Pull Requests", 
      condition: "1 pull request" 
    },
    { 
      name: "PR Creator", 
      description: "Tu prends de l'assurance", 
      icon: "üîÑüîÑ", 
      category: "üìù Pull Requests", 
      condition: "5 pull requests" 
    },
    { 
      name: "PR Expert", 
      description: "Un vrai professionnel", 
      icon: "üèÜüîÑ", 
      category: "üìù Pull Requests", 
      condition: "20 pull requests" 
    },
    
    // Badges de Commits
    { 
      name: "First Commit", 
      description: "Premier pas dans le monde du code", 
      icon: "üìù", 
      category: "üíª Commits", 
      condition: "1 commit" 
    },
    { 
      name: "Code Contributor", 
      description: "Tu participes activement", 
      icon: "üìùüìù", 
      category: "üíª Commits", 
      condition: "10 commits" 
    },
    { 
      name: "Commit Machine", 
      description: "Tes contributions sont impressionnantes", 
      icon: "ü§ñüìù", 
      category: "üíª Commits", 
      condition: "50 commits" 
    },
    { 
      name: "Code Legend", 
      description: "Tu es une l√©gende vivante", 
      icon: "üëëüìù", 
      category: "üíª Commits", 
      condition: "100 commits" 
    },
    
    // Badges de Repository
    { 
      name: "Repository Creator", 
      description: "Tu as cr√©√© ton premier repo", 
      icon: "üìÅ", 
      category: "üìÇ Repositories", 
      condition: "1 repository" 
    },
    { 
      name: "Project Manager", 
      description: "Tu g√®res plusieurs projets", 
      icon: "üìÅüìÅ", 
      category: "üìÇ Repositories", 
      condition: "5 repositories" 
    },
    
    // Badges Sp√©ciaux
    { 
      name: "Night Owl", 
      description: "Tu codes tard dans la nuit", 
      icon: "ü¶â", 
      category: "‚ú® Sp√©cial", 
      condition: "Committer apr√®s minuit" 
    },
    { 
      name: "Weekend Warrior", 
      description: "Tu codes m√™me le weekend", 
      icon: "üèùÔ∏è", 
      category: "‚ú® Sp√©cial", 
      condition: "Committer le weekend" 
    },
    { 
      name: "Multilingual", 
      description: "Tu ma√Ætrises plusieurs langages", 
      icon: "üåê", 
      category: "‚ú® Sp√©cial", 
      condition: "Coder dans 3+ langages" 
    },
  ];

  console.log(`Cr√©ation de ${badgesToCreate.length} badges...`);

  // Ins√©rer les badges
  const badges = [];
  for (const badgeData of badgesToCreate) {
    try {
      // V√©rifier si le badge existe d√©j√†
      const existingBadge = await prisma.badge.findFirst({
        where: { name: badgeData.name }
      });

      if (existingBadge) {
        console.log(`Le badge "${badgeData.name}" existe d√©j√†.`);
        badges.push(existingBadge);
      } else {
        // Cr√©er le badge
        const badge = await prisma.badge.create({
          data: {
            name: badgeData.name,
            description: badgeData.description,
            icon: badgeData.icon,
            category: badgeData.category,
            condition: badgeData.condition,
          }
        });
        console.log(`Badge cr√©√©: ${badge.name}`);
        badges.push(badge);
      }
    } catch (error) {
      console.error(`Erreur lors de la cr√©ation du badge "${badgeData.name}":`, error);
    }
  }

  console.log(`${badges.length} badges sont disponibles.`);

  // Attribuer certains badges √† l'utilisateur (simulation de badges d√©bloqu√©s)
  // Par d√©faut, d√©bloquons environ 5 badges pour l'utilisateur
  const badgesToUnlock = badges.slice(0, 5);

  console.log(`Attribution de ${badgesToUnlock.length} badges √† l'utilisateur...`);

  for (const badge of badgesToUnlock) {
    try {
      const existingUserBadge = await prisma.userBadge.findFirst({
        where: {
          user_id: user.id,
          badge_id: badge.id
        }
      });

      if (existingUserBadge) {
        console.log(`L'utilisateur poss√®de d√©j√† le badge "${badge.name}".`);
      } else {
        // Attribuer le badge √† l'utilisateur
        const userBadge = await prisma.userBadge.create({
          data: {
            user_id: user.id,
            badge_id: badge.id,
            unlocked_at: new Date()
          }
        });
        console.log(`Badge "${badge.name}" attribu√© √† l'utilisateur!`);
      }
    } catch (error) {
      console.error(`Erreur lors de l'attribution du badge "${badge.name}":`, error);
    }
  }

  // Afficher un r√©sum√©
  const userBadges = await prisma.userBadge.findMany({
    where: { user_id: user.id },
    include: { badge: true }
  });

  console.log(`\nR√©sum√© pour l'utilisateur ${user.name || user.username}:`);
  console.log(`- Total de badges d√©bloqu√©s: ${userBadges.length}`);
  
  const badgesByCategory = userBadges.reduce((acc, userBadge) => {
    const category = userBadge.badge.category || "Non cat√©goris√©";
    if (!acc[category]) acc[category] = [];
    acc[category].push(userBadge.badge);
    return acc;
  }, {} as Record<string, any[]>);

  console.log("- Badges par cat√©gorie:");
  Object.entries(badgesByCategory).forEach(([category, badges]) => {
    console.log(`  * ${category}: ${badges.length} badges`);
    badges.forEach(badge => {
      console.log(`    - ${badge.name} (${badge.icon})`);
    });
  });
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  }); 